# This differs from target_platform in that it determines what subdir the compiler
#    will target, not what subdir the compiler package will be itself.
#    For example, we need a win-64 vs2008_win-32 package, so that we compile win-32
#    code on win-64 miniconda.
cross_compiler_target_platform:  # [win]
  - win-64                     # [win]
c_compiler:
  - gcc                        # [linux]
  - clang                      # [osx]
  - vs2017                     # [win]
c_compiler_version:            # [unix]
  - 11                         # [osx]
  - 9                          # [linux]
cxx_compiler:
  - gxx                        # [linux]
  - clangxx                    # [osx]
  - vs2017                     # [win]
cxx_compiler_version:          # [unix]
  - 11                         # [osx]
  - 9                          # [linux]
fortran_compiler:              # [unix or win64]
  - gfortran                   # [linux64 or (osx and x86_64)]
  - gfortran                   # [aarch64 or ppc64le or armv7l]
  - flang                      # [win64]
fortran_compiler_version:      # [unix or win64]
  - 11                         # [osx and arm64]
  - 9                          # [osx and x86_64]
  - 9                          # [linux]
  - 5                          # [win64]
m2w64_c_compiler:              # [win]
  - m2w64-toolchain            # [win]
m2w64_cxx_compiler:            # [win]
  - m2w64-toolchain            # [win]
m2w64_fortran_compiler:        # [win]
  - m2w64-toolchain            # [win]
CMAKE_GENERATOR:               # [win]
  - NMake Makefiles            # [win]
CONDA_BUILD_SYSROOT:           # [osx]
  - /opt/MacOSX10.9.sdk        # [osx]
