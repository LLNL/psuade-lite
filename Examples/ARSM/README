This example demonstrates adaptive response surface analysis:

=============================================================
To run it:
(1) cc -o simulator simulator.c -lm
(2) psuade psuadeARSM1.in
    <answer 'n' to random selection or not>
    <answer 'n' to whether a test set is available>
After completeion:
- rename psuadeData to, say, psd
- now launch psuade and run 'rs2' (choose MARS)
- now use matlab to view the response surface

Then, 
- comment out the line "analyzer = ARSM" in psuadeARSM1.in.
- change the sample size to 100 in psuadeARSM1.in
- run: psuade psuadeARSM1.in
- rename psuadeData to, say, psd2
- launch psuade and run 'rs2' (choose MARS)
- now use matlab to view the response surface

Can you see any differences between the 2 response surfaces?
- the first one generated from adaptive sampling
- the second one generated from static sampling (same sample size)

=============================================================
Note: ARSM1 uses stochastic response surface and metis to
      bisect and estimate errors in order to add new points 
Note: ARSMNN uses response surface and metis and add new 
      points based on gradients of adjacent subdomains.
Note: ARSMG is similar to ARSM1 but it allows an initial
      sample to be used.
=============================================================
If you would like to generate a test set, do:

psuade psuadeValidate.in

and then rename psuadeData (to another name such as psValid)
and then when you run adaptive sampling, answer 'y' to whether
    a test set is available.

=============================================================
When the runs are then, you can look at the locations of the
sample points by:

- rename psuadeData to, for example, psD
- psuade
  > load psD
  > iplot2
    <select input 1 to be the X axis>

- use matlab to view matlabiplt2.m

=============================================================
You can also visualize the response surface by
- psuade
  > load psD
  > rs2
    < use MARS with bootstrapping>
    < do not set lower or upper bound>

- use matlab to view matlabrs2.m

